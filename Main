

import java.lang.Math; 

/**Three recursive problems.
 * Add your code to the three functions given below.
 * Do not change any part of the function headers (name, parameters, or return type).
 * Do not change any part of main.
 * @auther Bridget Naylor
 * @date 2/17/2020
 */
public class Main {
	
	public static void main( String[] args ) {
		
		if( addDigits( 428 ) == 14 ) {
			
			System.out.println( "addDigits1 is correct!" );
			
		}
		
		if( revFibonacci( 0, 1, 1, 5 ) == 5 ) {
			
			System.out.println( "revFib1 is correct!" );
			
		}	
		
		if( binToDec( "1101100" ) == 108 ) {
			
			System.out.println( "binToDec1 is correct!" );
			
		}
		
		if( addDigits( 321 ) == 6 ) {
			
			System.out.println( "addDigits2 is correct!" );
			
		}
		
		if( revFibonacci( 0, 1, 1, 10 ) == 55 ) {
			
			System.out.println( "revFib2 is correct!" );
			
		}	
		
		if( binToDec( "1011101" ) == 93 ) {
			
			System.out.println( "binToDec2 is correct!" );
			
		}
		
	}
	/**Finds the sum of the digits of num
	 * @param num value to find the sum of
	 * @return the sum of the digits
	 */
	public static int addDigits( int num ) {

//		System.out.println( "Initial Number = " + num);
		
		String number = String.valueOf( num );
		
		if ( number.length() > 0 ) {
			
			
			int takenOff = Integer.parseInt( number.substring( 0, 1 ) );
			
			if ( number.length() == 1) {
				
				return takenOff;
				
			}
			
			int leftOver = Integer.parseInt( number.substring( 1, number.length() ) );
			
//			System.out.println( "Taken Number = " + takenOff);
//			
//			System.out.println( "Left Over Number = " + leftOver);
			
			return takenOff + addDigits( leftOver );
			
		}

		return 0;
		
	}
	/**Finds the nth Fibonacci value
	 * @param f1 n-2 Fibonacci value
	 * @param f2 n-1 Fibonacci value
	 * @param c  counter
	 * @param n  the number c should count up to
	 * @return  the nth Fibonacci value 
 	 */
	public static int revFibonacci( int f1, int f2, int c, int n ) {
		
		int smallerNumber = f2;//f1
		int largerNumber = f1 + f2;//f2
		
		if ( c <= n) {
			
			//System.out.println( "F1 n -2 = " + f1 + " F2 n -1 = " + f2 + " counter = " + c + " number to count to = " + n);
			
			//System.out.println( " Final Answer = " + revFibonacci( smallerNumber, largerNumber, c + 1, n ));
			
			return revFibonacci( smallerNumber, largerNumber, c + 1, n );
			
		} 
		
		//System.out.println( "F2 = " + f1 );
		
		return f1;
		
	}
	
	/**Converts a binary string to decimal
	 * @param bin the binary string
	 * @return the decimal value 
	 */
	public static int binToDec( String bin ) {
		
		
		if ( bin.length() > 0) {
			
			String taken = bin.substring( 0, 1);
			
			String leftOver = bin.substring( 1, bin.length());
			
			if ( taken.equals("1") ) {
				
				
				return (int) Math.pow( 2, bin.length() - 1 ) + binToDec( leftOver ) ;
				
			} else if ( taken.equals("0") ) {
				
				return binToDec( leftOver ) ;
				
			}
			
		}
		
		
		return 0;
		
		
	}
}
