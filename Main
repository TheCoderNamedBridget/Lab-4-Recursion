
/**Three recursive problems.
 * Add your code to the three functions given below.
 * Do not change any part of the function headers (name, parameters, or return type).
 * Do not change any part of main.
 */
public class Main {
	
	public static void main( String[] args ) {
		
		if( addDigits( 428 ) == 14 ) {
			
			System.out.println( "addDigits1 is correct!" );
			
		}
		
		if( revFibonacci( 0, 1, 1, 5 ) == 5 ) {
			
			System.out.println( "revFib1 is correct!" );
			
		}	
		
		if( binToDec( "1101100" ) == 108 ) {
			
			System.out.println( "binToDec1 is correct!" );
			
		}
		
		if( addDigits( 321 ) == 6 ) {
			
			System.out.println( "addDigits2 is correct!" );
			
		}
		
		if( revFibonacci( 0, 1, 1, 10 ) == 55 ) {
			
			System.out.println( "revFib2 is correct!" );
			
		}	
		
		if( binToDec( "1011101" ) == 93 ) {
			
			System.out.println( "binToDec2 is correct!" );
			
		}
		
	}
	/**Finds the sum of the digits of num
	 * @param num value to find the sum of
	 * @return the sum of the digits
	 */
	public static int addDigits( int num ) {

		String number = String.valueOf( num );
		
		if ( number.length() == 1 ) {
			
			System.out.println( "IN IF " + num );
			
			return num;
			
		} else {
			
			System.out.println( "IN ELSE " + num );
			System.out.println( "IN ELSE ADD DIGITS " + (num + addDigits( Integer.parseInt( number.substring( 0, number.length() - 1 ) )) ));
			
			return num + addDigits( Integer.parseInt( number.substring( 0, number.length() - 1 ) ) );
			
		}
		
		
			
		

		
		
	}
	/**Finds the nth Fibonacci value
	 * @param f1 n-2 Fibonacci value
	 * @param f2 n-1 Fibonacci value
	 * @param c  counter
	 * @param n  the number c should count up to
	 * @return  the nth Fibonacci value 
 	 */
	public static int revFibonacci( int f1, int f2, int c, int n ) {
		return 0;
	}
	/**Converts a binary string to decimal
	 * @param bin the binary string
	 * @return the decimal value 
	 */
	public static int binToDec( String bin ) {
		return 0;
	}
}
